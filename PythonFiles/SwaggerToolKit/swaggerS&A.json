{
  "openapi": "3.0.1",
  "info": {
    "title": "Graph REST Service API",
    "description": "Graph Service ASP.NET Core Web API",
    "termsOfService": "https://example.com/terms",
    "contact": {
      "name": "S&A Sistemi & Automazione srl",
      "url": "https://sealink.it/",
      "email": ""
    },
    "license": {
      "name": "Use under LICX",
      "url": "https://example.com/license"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "192.168.100.149:6510"
    }
  ],
  "paths": {
    "/api/graphs": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "GET api/graphs/\r\nRetrieve the list of chart for specific user",
        "parameters": [
          {
            "name": "destination",
            "in": "query",
            "description": "STAGE/STORE: which kind of persistence was used to save the charts",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/\r\nUpload datcart (zip/dcj string) with metadata to store or stage",
        "description": "The entities/links in the datacart will be saved in the db, if the entity/link is already in the db, its MERGEMODE will be used to proceed\r\n    - MERGEMODE.MERGE -> update the item with the properties unified (ex.: if a property in common is text it will be concatenated)\r\n    - MERGEMODE.SKIP -> do not update the object in the db\r\n    - else -> substitute the object in the db with the new one\r\nIf the id is specified, the chart will be updated, otherwise a new chart will be created\r\n    <br>DESTINATION: STAGE/STORE: which kind of persistence to use to save the chart<br>NAME: the name to associate the chart with (use for a new chart). If null, the items are saved without a chart reference or the id is used<br>ID: the id the chart is associated to (use for edit purposes, it is more important than 'name')<br>DCJ: a file named dcj.json compressed in a zip file<br>dcjserialized: a string alternative to zip file, use only for small datacart<br>centralElement: a string containing the dcj of the central entity",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "destination": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "dcj": {
                    "type": "string",
                    "format": "binary"
                  },
                  "dcjserialized": {
                    "type": "string"
                  },
                  "centralElement": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "All the items have been added/edited",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chart"
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs/properties": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "GET api/graphs/properties\r\nRetrieve the list of properties in the DB for all the nodes",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs/{chartId}": {
      "get": {
        "tags": [
          "Graph"
        ],
        "summary": "GET api/graphs/{chartid}\r\nRetrieve chart content with chartid",
        "parameters": [
          {
            "name": "chartId",
            "in": "path",
            "description": "The id of the chart to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs/deleteChart/{chartId}": {
      "delete": {
        "tags": [
          "Graph"
        ],
        "summary": "DELETE api/graphs/deleteChart/{chartId}\r\nDelete chart using chartId",
        "description": "Only the chart object and its chartitems will be deleted, the entities/links in the chart will remain in the db",
        "parameters": [
          {
            "name": "chartId",
            "in": "path",
            "description": "The id of the chart to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {}
          },
          "204": {
            "description": "The chart has been deleted",
            "content": {}
          }
        }
      }
    },
    "/api/graphs/delete": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/delete\r\nDelete items from the db or delete their reference from charts",
        "description": "If id is specified, remove the chartitems that link the chart with the entities/links in the datacart\r\nElse delete the items inside the datacart from the db\r\n    <br>id: the id of the chart to unlink the entities/links from<br>groupId: the id of the group to unlink the entities/links from<br>dcj: a file named dcj.json compressed in a zip file<br>dcjserialized: a string alternative to zip file, use only for small datacart",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "groupId": {
                    "type": "string"
                  },
                  "dcj": {
                    "type": "string",
                    "format": "binary"
                  },
                  "dcjserialized": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "All the items have been deleted",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "206": {
            "description": "Some of the items could not be deleted, the response contains a dcj with that items and, inside each one a custom property ERROR_MESSAGE with the cause",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/graphs/search": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/search\r\nPerform search using the datacart in the requestParameters",
        "description": "For each entity in the datacart, the search will return all the entities in the db that have the same properties (except for the key) as it has\r\nFor text fields, it performs a LIKE query using these wildcards\r\n    `_`: A single arbitrary character\r\n    `%`: Zero, one or many arbitrary characters\r\n    `\\\\_`: A literal underscore\r\n    `\\\\%`: A literal percent sign\r\nFor other fields' types it performs an exact match\r\nFor fields that have a RANGE SearchInputType it uses the properties\r\n    - {propertyName}__START: the start of the range\r\n    - {propertyName}__END: the end of the range",
        "requestBody": {
          "description": "Parameters to use for the search operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/list": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/list\r\nRetrieve the list of chart for specific user and value",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chart"
                  }
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/list-linked": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/list-linked\r\nRetrieve the list of types' entities that are linked with entities for specific user and value",
        "description": "To retrieve all the entities of type 'Nota' that contain an entity with a specific value\r\n   search for that value in the 'Query' field and set the 'Types' field to the list of types you want to retrieve ex: ['Nota']",
        "requestBody": {
          "description": "the parameters for the search",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/list-nodes": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/list-nodes\r\nRetrieve the list of nodes for specific value",
        "description": "It performs a LIKE query on all the properties' values using these wildcards\r\n    `_`: A single arbitrary character\r\n    `%`: Zero, one or many arbitrary characters\r\n    `\\\\_`: A literal underscore\r\n    `\\\\%`: A literal percent sign",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/expand": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/expand\r\nRetrieve the list of nodes linked to nodes with specific key and the respective links",
        "requestBody": {
          "description": "The request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/neighbors-frequency": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/neighbors-frequency\r\nRetrieve the neighbors of the nodes in the datacart and the frequency of their links",
        "requestBody": {
          "description": "The request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/expandCluster": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/expandCluster\r\nExpand cluster by ids",
        "requestBody": {
          "description": "Params to use for the expansion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartDetails"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/graph-to-query": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/graph-to-query\r\nRetrieves all the subgraphs in the db that have the same pattern as the input graph",
        "description": "The datacart in the result is the union of all the datacarts of the subgraphs\r\nEach item in the datacart has a custom property 'GRS_IN_PATHS' that contains an array of strings which identify the paths where that item is present",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/similar": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/similar\r\nGet graph with entities that are similar to the ones provided in the input graph",
        "requestBody": {
          "description": "Params to use for the expansion",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/api/graphs/searchByParams": {
      "post": {
        "tags": [
          "Graph"
        ],
        "summary": "POST api/graphs/searchByParams\r\nPerform search using the requestParameters",
        "requestBody": {
          "description": "Parameters to use for the search operation",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "Returns the dcj of the result datacart it.sealink.xmlmodel.datacart.DcxDataCart",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    }
  }
}